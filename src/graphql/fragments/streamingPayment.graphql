fragment StreamingPayment on StreamingPayment {
  id
  nativeId
  recipientAddress
  nativeDomainId
  startTime
  endTime
  interval
  tokenAddress
  token {
    ...Token
  }
  payouts {
    ...ExpenditurePayout
  }
  amount
  isCancelled
  isWaived
  createdAt
  metadata {
    endCondition
    changelog {
      transactionHash
      oldEndCondition
      newEndCondition
    }
    limitAmount
  }
  claims {
    amount
    timestamp
    tokenAddress
  }
  creatingActions: actions(filter: { type: { eq: CREATE_STREAMING_PAYMENT } }) {
    items {
      transactionHash: id
    }
  }
}

fragment StreamingPaymentChanges on StreamingPaymentChanges {
  startTime
  endTime
  interval
  amount
}

fragment StreamingPaymentChanges on StreamingPaymentChanges {
  startTime
  endTime
  interval
  amount
}

fragment StreamingPaymentChanges on StreamingPaymentChanges {
  startTime
  endTime
  interval
  amount
}
