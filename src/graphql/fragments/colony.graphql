fragment Colony on Colony {
  colonyAddress: id
  name
  nativeToken {
    ...Token
  }
  status {
    recovery
    nativeToken {
      mintable
      unlockable
      unlocked
    }
  }
  chainMetadata {
    chainId
  }
  tokens {
    ...ColonyTokensConnection
  }
  motionsWithUnclaimedStakes {
    ...UnclaimedStakes
  }
  domains {
    items {
      ...Domain
    }
  }
  balances {
    ...ColonyBalances
  }
  fundsClaims {
    items {
      ...FundsClaim
    }
  }
  chainFundsClaim {
    # For native chain tokens. Eg: Eth/Xdai
    ...ChainFundsClaim
  }
  version
  metadata {
    ...ColonyMetadata
  }
  roles {
    items {
      ...ColonyRole
    }
  }
}

fragment ColonyDisplay on Colony {
  colonyAddress: id
  name
  metadata {
    displayName
    avatar
    thumbnail
  }
}

fragment ColonyTokensConnection on ModelColonyTokensConnection {
  items {
    colonyTokensId: id
    token {
      ...Token
    }
  }
}

fragment UnclaimedStakes on ColonyUnclaimedStake {
  motionId
  unclaimedRewards {
    address
    rewards {
      nay
      yay
    }
  }
}

fragment WatchedColony on Colony {
  colonyAddress: id
  name
  chainMetadata {
    chainId
  }
  metadata {
    ...ColonyMetadata
  }
}

fragment WatchListItem on WatchedColonies {
  colony {
    ...WatchedColony
  }
  createdAt
}

fragment ColonyMetadata on ColonyMetadata {
  displayName
  avatar
  thumbnail
  isWhitelistActivated
  whitelistedAddresses
  changelog {
    transactionHash
    newDisplayName
    oldDisplayName
    hasAvatarChanged
    hasWhitelistChanged
    haveTokensChanged
    haveSafesChanged
  }
  safes {
    ...Safe
  }
}

fragment ColonyBalances on ColonyBalances {
  items {
    ...ColonyBalance
  }
}

fragment ColonyBalance on ColonyBalance {
  id
  balance
  domain {
    ...Domain
  }
  token {
    ...Token
  }
}

fragment FundsClaim on ColonyFundsClaim {
  id
  token {
    ...Token
  }
  createdAtBlock
  createdAt
  amount
}

fragment ChainFundsClaim on ColonyChainFundsClaim {
  id
  createdAtBlock
  createdAt
  amount
}

fragment ColonyRole on ColonyRole {
  id
  domain {
    # @TODO Make a "Light" fragment out of this
    nativeId
  }
  targetAddress
  role_0
  role_1
  role_2
  role_3
  role_5
  role_6
}

fragment Safe on Safe {
  name
  address
  chainId
  moduleContractAddress
}
