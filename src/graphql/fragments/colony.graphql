fragment Colony on Colony {
  colonyAddress: id
  name
  nativeToken {
    ...Token
  }
  status {
    recovery
    nativeToken {
      ...NativeTokenStatus
    }
  }
  chainMetadata {
    chainId
    network
  }
  tokens {
    ...ColonyTokensConnection
  }
  motionsWithUnclaimedStakes {
    ...UnclaimedStakes
  }
  domains(sortDirection: ASC) {
    items {
      ...Domain
    }
  }
  balances {
    ...ColonyBalances
  }
  fundsClaims {
    items {
      ...FundsClaim
    }
  }
  chainFundsClaim {
    # For native chain tokens. Eg: Eth/Xdai
    ...ChainFundsClaim
  }
  version
  metadata {
    ...ColonyMetadata
  }
  roles {
    items {
      ...ColonyRole
    }
  }
  reputation
  expendituresGlobalClaimDelay
  private
  colonyMemberInvite {
    id
    invitesRemaining
  }
}

fragment PublicColony on Colony {
  colonyAddress: id
  name
  metadata {
    avatar
    displayName
    externalLinks {
      link
      name
    }
    thumbnail
  }
}

fragment ColonyTokensConnection on ModelColonyTokensConnection {
  items {
    colonyTokensId: id
    token {
      ...Token
    }
  }
}

fragment UnclaimedStakes on ColonyUnclaimedStake {
  motionId
  unclaimedRewards {
    address
    rewards {
      nay
      yay
    }
  }
}

fragment ColonyMetadata on ColonyMetadata {
  displayName
  avatar
  description
  externalLinks {
    name
    link
  }
  thumbnail
  modifiedTokenAddresses {
    added
    removed
  }
  objective {
    ...ColonyObjective
  }
  changelog {
    transactionHash
    newDisplayName
    oldDisplayName
    hasAvatarChanged
    haveTokensChanged
    hasDescriptionChanged
    haveExternalLinksChanged
    hasObjectiveChanged
    newSafes {
      ...Safe
    }
    oldSafes {
      ...Safe
    }
  }
  safes {
    ...Safe
  }
}

fragment ColonyBalances on ColonyBalances {
  items {
    ...ColonyBalance
  }
}

fragment ColonyBalance on ColonyBalance {
  id
  balance
  domain {
    ...Domain
  }
  token {
    ...Token
  }
}

fragment FundsClaim on ColonyFundsClaim {
  id
  token {
    ...Token
  }
  createdAtBlock
  createdAt
  amount
  isClaimed
}

fragment ChainFundsClaim on ColonyChainFundsClaim {
  id
  createdAtBlock
  createdAt
  amount
  isClaimed
}

fragment ColonyRole on ColonyRole {
  id
  domain {
    id
    # @TODO Make a "Light" fragment out of this
    nativeId
  }
  targetAddress
  role_0
  role_1
  role_2
  role_3
  role_5
  role_6
  isMultiSig
}

fragment Safe on Safe {
  name
  address
  chainId
  moduleContractAddress
}

fragment ColonyObjective on ColonyObjective {
  title
  description
  progress
}

# Lightweight fragment used for fetching colonies user is a member of
fragment JoinedColony on Colony {
  colonyAddress: id
  name
  metadata {
    ...ColonyMetadata
  }
  chainMetadata {
    chainId
    network
  }
}
