fragment Expenditure on Expenditure {
  id
  nativeId
  ownerAddress
  status
  slots {
    ...ExpenditureSlot
  }
  nativeFundingPotId
  nativeDomainId
  metadata {
    fundFromDomainNativeId
    distributionType
    stages {
      ...ExpenditureStage
    }
    expectedNumberOfPayouts
    expectedNumberOfTokens
  }
  creatingActions: actions(filter: { type: { eq: CREATE_EXPENDITURE } }) {
    items {
      metadata {
        customTitle
      }
      transactionHash: id
    }
  }
  finalizedAt
  createdAt
  motions {
    items {
      ...ColonyMotion
      expenditureSlotIds
    }
  }
  type
  isStaked
  userStake {
    amount
    isClaimed
  }
  balances {
    ...ExpenditureBalance
  }
  # @NOTE: If querying actions field multiple times proves slow, we could query it once and filter on the client
  lockingActions: actions(
    filter: {
      type: { eq: LOCK_EXPENDITURE }
      isMotionFinalization: { ne: true }
    }
  ) {
    items {
      ...ExpenditureAction
    }
  }
  fundingActions: actions(
    filter: { type: { eq: MOVE_FUNDS }, isMotionFinalization: { ne: true } }
  ) {
    items {
      ...ExpenditureAction
    }
  }
  finalizingActions: actions(
    filter: {
      type: { eq: FINALIZE_EXPENDITURE }
      isMotionFinalization: { ne: true }
    }
  ) {
    items {
      ...ExpenditureAction
    }
  }
  cancellingActions: actions(
    filter: {
      type: { eq: CANCEL_EXPENDITURE }
      isMotionFinalization: { ne: true }
    }
  ) {
    items {
      ...ExpenditureAction
    }
  }
  editingActions: actions(
    filter: {
      type: { eq: EDIT_EXPENDITURE }
      isMotionFinalization: { ne: true }
    }
  ) {
    items {
      ...ExpenditureAction
    }
  }
}

fragment ExpenditureSlot on ExpenditureSlot {
  id
  recipientAddress
  claimDelay
  payoutModifier
  payouts {
    ...ExpenditurePayout
  }
}

fragment ExpenditurePayout on ExpenditurePayout {
  tokenAddress
  amount
  isClaimed
  networkFee
}

fragment ExpenditureStage on ExpenditureStage {
  slotId
  name
}

fragment ExpenditureBalance on ExpenditureBalance {
  tokenAddress
  amount
}

fragment ExpenditureAction on ColonyAction {
  id
  initiatorAddress
  createdAt
  initiatorUser {
    ...User
  }
}
