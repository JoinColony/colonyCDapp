fragment ColonyAction on ColonyAction {
  transactionHash: id
  colonyAddress: colonyId
  type
  blockNumber
  initiatorAddress
  initiatorUser {
    ...UserDisplay
  }
  initiatorColony {
    ...PublicColony
  }
  initiatorExtension {
    ...ExtensionDisplayFragment
  }
  initiatorToken {
    # NOTE: Token doesn't have a lightweight Display-only Fragment, as the props
    # on that fragment are just 2 less than the actual "full" version of the Fragment
    ...Token
  }
  initiatorColony {
    ...Colony
  }
  initiatorExtension {
    ...Extension
  }
  initiatorToken {
    ...Token
  }
  recipientAddress
  recipientUser {
    ...UserDisplay
  }
  recipientColony {
    ...PublicColony
  }
  recipientExtension {
    ...ExtensionDisplayFragment
  }
  recipientToken {
    # NOTE: Token doesn't have a lightweight Display-only Fragment, as the props
    # on that fragment are just 2 less than the actual "full" version of the Fragment
    ...Token
  }
  recipientColony {
    ...Colony
  }
  recipientExtension {
    ...Extension
  }
  recipientToken {
    ...Token
  }
  amount
  networkFee
  tokenAddress
  token {
    # NOTE: Token doesn't have a lightweight Display-only Fragment, as the props
    # on that fragment are just 2 less than the actual "full" version of the Fragment
    ...Token
  }
  fromDomain {
    ...Domain
  }
  toDomain {
    ...Domain
  }
  createdAt
  newColonyVersion
  roles {
    role_0
    role_1
    role_2
    role_3
    role_5
    role_6
  }
  rolesAreMultiSig
  individualEvents
  isMotion
  payments {
    amount
    tokenAddress
    recipientAddress
  }
  motionData {
    ...ColonyMotion
  }
  colony {
    colonyAddress: id
    name
    nativeToken {
      nativeTokenDecimals: decimals
      nativeTokenSymbol: symbol
      tokenAddress: id
      name
    }
    tokens {
      ...ColonyTokensConnection
    }
    metadata {
      ...ColonyMetadata
    }
  }
  showInActionsList
  pendingDomainMetadata {
    ...DomainMetadata
  }
  pendingColonyMetadata {
    ...ColonyMetadata
  }
  annotation {
    ...Annotation
  }
  decisionData {
    ...ColonyDecision
  }
  safeTransaction {
    ...SafeTransaction
  }
  metadata {
    customTitle
  }
  members
  rootHash
  expenditureId
  isMultiSig
  multiSigId
  multiSigData {
    ...ColonyMultiSig
  }
<<<<<<< HEAD
  approvedTokenChanges {
    ...ApprovedTokenChanges
  }
}

fragment ApprovedTokenChanges on ApprovedTokenChanges {
  added
  removed
  unaffected
>>>>>>> 2c4161a9a (feat: implement dummy sidebar for multiSig, navigate after tx success)
=======
>>>>>>> 4c63c6e32 (feat: realign after rebase)
}

fragment Annotation on Annotation {
  createdAt
  message
}

fragment MotionStakeValues on MotionStakeValues {
  yay
  nay
}

fragment UserMotionStakes on UserMotionStakes {
  address
  stakes {
    raw {
      ...MotionStakeValues
    }
    percentage {
      ...MotionStakeValues
    }
  }
}

fragment ColonyMotion on ColonyMotion {
  databaseMotionId: id
  motionId: nativeMotionId
  motionStakes {
    ...MotionStakes
  }
  usersStakes {
    ...UserMotionStakes
  }
  remainingStakes
  userMinStake
  requiredStake
  motionDomain {
    ...Domain
  }
  nativeMotionDomainId
  stakerRewards {
    address
    rewards {
      yay
      nay
    }
    isClaimed
  }
  isFinalized
  voterRecord {
    ...VoterRecord
  }
  revealedVotes {
    ...MotionStakes
  }
  skillRep
  repSubmitted
  hasObjection
  motionStateHistory {
    hasVoted
    hasPassed
    hasFailed
    hasFailedNotFinalizable
    inRevealPhase
    yaySideFullyStakedAt
    naySideFullyStakedAt
    allVotesSubmittedAt
    allVotesRevealedAt
    endedAt
    finalizedAt
  }
  messages {
    items {
      ...MotionMessage
    }
  }
  objectionAnnotation {
    ...Annotation
  }
  isDecision
  transactionHash
  action {
    type
  }
  createdAt
}

fragment MotionMessage on MotionMessage {
  initiatorAddress
  name
  messageKey
  initiatorUser {
    ...User
  }
  vote
  amount
  createdAt
}

fragment VoterRecord on VoterRecord {
  address
  voteCount
  vote
}

fragment MotionStakes on MotionStakes {
  raw {
    ...MotionStakeValues
  }
  percentage {
    ...MotionStakeValues
  }
}

fragment ColonyDecision on ColonyDecision {
  title
  description
  motionDomainId
  walletAddress
  createdAt
  actionId
  colonyAddress
}

fragment MultiSigUserSignature on MultiSigUserSignature {
  id
  role
  userAddress
  user {
    ...User
  }
  multiSigId
  vote
  createdAt
  updatedAt
}

fragment ColonyMultiSig on ColonyMultiSig {
  id
  nativeMultiSigId
  multiSigDomain {
    ...Domain
  }
  multiSigDomainId
  nativeMultiSigDomainId
  requiredPermissions
  transactionHash
  isExecuted
  isSuccess
  isRejected
  isDecision
  signatures {
    items {
      ...MultiSigUserSignature
    }
  }
}
