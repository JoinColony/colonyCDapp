# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

input TokenFromEverywhereArguments {
  tokenAddress: String!
}

input CreateUniqueUserInput {
  id: ID!
  name: String!
  profile: ProfileInput
}

input MetadataInput {
  network: Network
  chainId: Int
}

input NativeTokenStatusInput {
  unlocked: Boolean
  mintable: Boolean
  unlockable: Boolean
}

input ColonyStatusInput {
  nativeToken: NativeTokenStatusInput
  recovery: Boolean
}

input CreateUniqueColonyInput {
  id: ID!
  name: String!
  colonyNativeTokenId: ID!
  profile: ProfileInput
  type: ColonyType
  status: ColonyStatusInput
  meta: MetadataInput
}

input ProfileInput {
  avatar: String
  thumbnail: String
  displayName: String
  bio: String
  location: String
  website: AWSURL
  email: AWSEmail
}

input CreateUniqueDomainInput {
  colonyAddress: ID!
  parentId: ID
  name: String
  description: String
  color: DomainColor
}

input GetUserReputationInput {
  walletAddress: String!
  colonyAddress: String!
  domainId: Int
  rootHash: String
}

type TokenFromEverywhereReturn {
  items: [Token]
}

enum TokenType {
  COLONY
  ERC20
}

enum Network {
  GANACHE
  MAINNET
  GOERLI
  GNOSIS
  GNOSISFORK
}

enum DomainColor {
  LIGHTPINK
  PINK
  BLACK
  EMERALDGREEN
  BLUE
  YELLOW
  RED
  GREEN
  PERIWINKLE
  GOLD
  AQUA
  BLUEGREY
  PURPLE
  ORANGE
  MAGENTA
  PURPLEGREY
}

enum ColonyType {
  COLONY
  METACOLONY
}

type Query {
  getTokenFromEverywhere(
    input: TokenFromEverywhereArguments
  ): TokenFromEverywhereReturn @function(name: "fetchTokenFromChain")
  getUserReputation(
    input: GetUserReputationInput
  ): String @function(name: "getUserReputation")
}

type Mutation {
  createUniqueUser(
    input: CreateUniqueUserInput
  ): User @function(name: "createUniqueUser")
  createUniqueColony(
    input: CreateUniqueColonyInput
  ): ColonyID @function(name: "createUniqueColony")
  createUniqueDomain(
    input: CreateUniqueDomainInput
  ): Domain @function(name: "createUniqueDomain")
}

# Applies to both Users and Colonies
# Might need to separate it into two later down the line
type Profile {
  avatar: String
  thumbnail: String
  displayName: String
  bio: String
  location: String
  website: AWSURL
  email: AWSEmail
}

type NativeTokenStatus {
  unlocked: Boolean # If it's already unlocked
  mintable: Boolean # User has permissions to mint new tokens
  unlockable: Boolean # Token can be unlocked
}

type ColonyStatus {
  nativeToken: NativeTokenStatus
  recovery: Boolean # if it's in recovery mode
}

# Applies to both Colonies and Tokens
# It does not apply to user accounts as they can live on all networks
type Metadata {
  network: Network
  chainId: Int
}

type Token @model {
  id: ID! @index(name: "byAddress", queryField: "getTokenByAddress") # contract address
  name: String!
  symbol: String!
  decimals: Int!
  type: TokenType @index(name: "byType", queryField: "getTokensByType")
  colonies: [Colony] @manyToMany(relationName: "ColonyTokens")
  users: [User] @manyToMany(relationName: "UserTokens")
  meta: Metadata
}

type ColonyID {
  id: ID!
}

type Colony @model {
  id: ID! @index(name: "byAddress", queryField: "getColonyByAddress") # contract address
  name: String! @index(name: "byName", queryField: "getColonyByName")
  nativeToken: Token! @hasOne
  tokens: [Token] @manyToMany(relationName: "ColonyTokens")
  profile: Profile
  status: ColonyStatus
  domains: [Domain] @hasMany
  transactions: [ColonyTransaction] @hasMany
  watchers: [User] @manyToMany(relationName: "WatchedColonies") # colony subscriptions
  type: ColonyType @index(name: "byType", queryField: "getColonyByType")
  meta: Metadata
}

type User @model {
  id: ID! @index(name: "byAddress", queryField: "getUserByAddress") # wallet address
  name: String! @index(name: "byName", queryField: "getUserByName")
  tokens: [Token] @manyToMany(relationName: "UserTokens")
  profile: Profile
  watchlist: [Colony] @manyToMany(relationName: "WatchedColonies") # colony subscriptions
}

type Domain @model {
  id: ID! # colonyAddress_nativeChainId
  nativeId: Int!
  name: String
  description: String
  color: DomainColor
  parent: Domain @hasOne
}

type ColonyTransactionStatus {
  claimed: Boolean
}

type TransactionArguments {
  source: String
  amount: String
}

type ColonyTransaction @model {
  id: ID! # transactionHash_logIndex
  token: Token! @hasOne
  createdAtBlock: Int!
  status: ColonyTransactionStatus
  args: TransactionArguments
}
