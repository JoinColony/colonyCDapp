# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
# NOTE: This file is getting out hand in terms of size
# There is an official way of splitting the schema into multiple files
# https://docs.amplify.aws/cli-legacy/graphql-transformer/overview/#api-category-project-structure
# but I never could get it to work

input TokenFromEverywhereArguments {
  tokenAddress: String!
}

input MembersForColonyInput {
  colonyAddress: String!
  rootHash: String
  domainId: Int
  sortingMethod: SortingMethod
}

input CreateUniqueUserInput {
  id: ID!
  name: String!
  profile: ProfileInput
}

enum EmailPermissions {
  sendNotifications
  isHuman
}

input ProfileMetadataInput {
  emailPermissions: [String!]!
}

input ChainMetadataInput {
  network: Network
  chainId: Int
  transactionHash: String
  logIndex: Int
  blockNumber: Int
}

input NativeTokenStatusInput {
  unlocked: Boolean
  mintable: Boolean
  unlockable: Boolean
}

input ColonyStatusInput {
  nativeToken: NativeTokenStatusInput
  recovery: Boolean
}

input CreateUniqueColonyInput {
  id: ID!
  name: String!
  colonyNativeTokenId: ID!
  type: ColonyType
  status: ColonyStatusInput
  chainMetadata: ChainMetadataInput
  version: Int!
}

input ProfileInput {
  id: ID # nullable since resolver will use User / Colony id by default
  avatar: String
  thumbnail: String
  displayName: String
  bio: String
  location: String
  website: AWSURL
  email: AWSEmail
  meta: ProfileMetadataInput
}

input GetUserReputationInput {
  walletAddress: String!
  colonyAddress: String!
  domainId: Int
  rootHash: String
}

input UpdateExtensionByColonyAndHashInput {
  colonyId: ID!
  hash: String!
  isDeprecated: Boolean
  isDeleted: Boolean
  isInitialized: Boolean
  version: Int
  installedBy: String
  installedAt: AWSTimestamp
}

input SetCurrentVersionInput {
  key: String!
  version: Int!
}

type TokenFromEverywhereReturn {
  items: [Token]
}

input GetReputationForTopDomainsInput {
  walletAddress: String!
  colonyAddress: String!
  rootHash: String
}

input GetUserTokenBalanceInput {
  walletAddress: String!
  tokenAddress: String!
}

type UserDomainReputation {
  domainId: Int!
  reputationPercentage: String!
}

type GetReputationForTopDomainsReturn {
  items: [UserDomainReputation!]
}

type GetUserTokenBalanceReturn {
  balance: String # total balance, sum of inactive, locked and active
  inactiveBalance: String
  lockedBalance: String
  activeBalance: String
  pendingBalance: String
}

# Definitions:
# Member = User watching a Colony, with or without reputation
# Contributor = User watching a Colony WITH reputation
# Watcher = User watching a Colony WITHOUT reputation
type MembersForColonyReturn {
  contributors: [Contributor!]
  watchers: [Watcher!]
}

enum TokenType {
  COLONY
  ERC20
  CHAIN_NATIVE
}

enum Network {
  GANACHE
  MAINNET
  GOERLI
  GNOSIS
  GNOSISFORK
}

enum DomainColor {
  LIGHT_PINK
  PINK
  BLACK
  EMERALD_GREEN
  BLUE
  YELLOW
  RED
  GREEN
  PERIWINKLE
  GOLD
  AQUA
  BLUE_GREY
  PURPLE
  ORANGE
  MAGENTA
  PURPLE_GREY
}

enum ColonyType {
  COLONY
  METACOLONY
}

enum ColonyActionType {
  GENERIC
  WRONG_COLONY
  PAYMENT
  RECOVERY
  MOVE_FUNDS
  UNLOCK_TOKEN
  MINT_TOKENS
  CREATE_DOMAIN
  VERSION_UPGRADE
  COLONY_EDIT
  EDIT_DOMAIN
  SET_USER_ROLES
  EMIT_DOMAIN_REPUTATION_PENALTY
  EMIT_DOMAIN_REPUTATION_REWARD
}

enum SortingMethod {
  BY_HIGHEST_REP
  BY_LOWEST_REP
  BY_MORE_PERMISSIONS
  BY_LESS_PERMISSIONS
}

type Query {
  getTokenFromEverywhere(
    input: TokenFromEverywhereArguments
  ): TokenFromEverywhereReturn @function(name: "fetchTokenFromChain")
  getReputationForTopDomains(
    input: GetReputationForTopDomainsInput
  ): GetReputationForTopDomainsReturn
    @function(name: "getReputationForTopDomains")
  getUserReputation(input: GetUserReputationInput): String
    @function(name: "getUserReputation")
  getUserTokenBalance(
    input: GetUserTokenBalanceInput
  ): GetUserTokenBalanceReturn @function(name: "getUserTokenBalance")
  getMembersForColony(input: MembersForColonyInput): MembersForColonyReturn
    @function(name: "getMembersForColony")
}

type Mutation {
  createUniqueUser(input: CreateUniqueUserInput): User
    @function(name: "createUniqueUser")
  createUniqueColony(input: CreateUniqueColonyInput): Colony
    @function(name: "createUniqueColony")
  setCurrentVersion(input: SetCurrentVersionInput): Boolean
    @function(name: "setCurrentVersion")
  updateExtensionByColonyAndHash(
    input: UpdateExtensionByColonyAndHashInput
  ): ColonyExtension @function(name: "updateExtensionByColonyAndHash")
}

type Profile @model {
  id: ID!
  avatar: String
  thumbnail: String
  displayName: String
  bio: String
  location: String
  website: AWSURL
  email: AWSEmail @index(name: "byEmail", queryField: "getProfileByEmail")
  meta: ProfileMetadata
}

type NativeTokenStatus {
  unlocked: Boolean # If it's already unlocked
  mintable: Boolean # User has permissions to mint new tokens
  unlockable: Boolean # Token can be unlocked
}

type ColonyStatus {
  nativeToken: NativeTokenStatus
  recovery: Boolean # if it's in recovery mode
}

# Applies to both Colonies Tokens and Events, but not all fields are revlant to all
# It does not apply to user accounts as they can live on all networks
type ChainMetadata {
  network: Network
  chainId: Int
  transactionHash: String
  logIndex: Int
  blockNumber: Int
}

type ProfileMetadata {
  emailPermissions: [String!]!
}

type Contributor {
  user: User
  reputationPercentage: String
  reputationAmount: String
}

type Watcher {
  user: User
}

type Token @model {
  id: ID!
    @index(name: "byAddress", queryField: "getTokenByAddress")
    @index(sortKeyFields: ["createdAt"]) # contract address
  name: String!
  symbol: String!
  decimals: Int!
  type: TokenType @index(name: "byType", queryField: "getTokensByType")
  colonies: [Colony] @manyToMany(relationName: "ColonyTokens")
  users: [User] @manyToMany(relationName: "UserTokens")
  avatar: String
  thumbnail: String
  chainMetadata: ChainMetadata
  createdAt: AWSDateTime!
}

type ColonyID {
  id: ID!
}

type Colony @model {
  id: ID! @index(name: "byAddress", queryField: "getColonyByAddress") # colony contract address
  name: String! @index(name: "byName", queryField: "getColonyByName")
  nativeToken: Token! @hasOne
  tokens: [Token] @manyToMany(relationName: "ColonyTokens")
  status: ColonyStatus
  domains: [Domain] @hasMany(indexName: "byColony", fields: ["id"])
  watchers: [User] @manyToMany(relationName: "WatchedColonies") # colony subscriptions
  # NOTE: Could not merge these two fields properly
  # Ideally we would merge data from these two into one field, but I couldn't do that
  # meaning we'll have to merge this data in-app (or not at all, works either way)
  # If you have a better idea, on how to merged them, I'll all ears...
  fundsClaims: [ColonyFundsClaim] @hasMany # All ERC20 token claims
  # Native chain token claims (eg: Token 0x0000...0000)
  # This is not an array since only a single token type can be returned
  chainFundsClaim: ColonyChainFundsClaim
    @function(name: "fetchColonyNativeFundsClaim")
  type: ColonyType @index(name: "byType", queryField: "getColonyByType")
  # Returns a list token balances for each domain and each token that the colony has
  balances: ColonyBalances @function(name: "fetchColonyBalances")
  chainMetadata: ChainMetadata
  extensions: [ColonyExtension!] @hasMany(indexName: "byColony", fields: ["id"])
  version: Int!
  actions: [ColonyAction] @hasMany
  metadata: ColonyMetadata @hasOne(fields: ["id"])
  # @TODO This should not be fetched upfront
  # It should be retrieved on demand at the earliest occasion it's needed
  # ie: when opening a UAC modal
  roles: [ColonyRole] @hasMany
}

type ColonyMetadata @model {
  id: ID! # colony contract address
  displayName: String!
  avatar: String
  thumbnail: String
  changelog: [ColonyMetadataChangelog!]
  isWhitelistActivated: Boolean
  whitelistedAddresses: [String!]
}

type ColonyMetadataChangelog {
  transactionHash: String!
  oldDisplayName: String!
  newDisplayName: String!
  hasAvatarChanged: Boolean!
  hasWhitelistChanged: Boolean!
  haveTokensChanged: Boolean!
}

type User @model {
  id: ID! @index(name: "byAddress", queryField: "getUserByAddress") # wallet address
  name: String! @index(name: "byName", queryField: "getUserByName")
  tokens: [Token] @manyToMany(relationName: "UserTokens")
  profileId: ID
  profile: Profile @hasOne(fields: ["profileId"])
  watchlist: [Colony] @manyToMany(relationName: "WatchedColonies") # colony subscriptions
}

type Domain @model {
  id: ID! # We have to self-manage this and keep it the following format: colonyAddress_nativeId
  colonyId: ID! @index(name: "byColony")
  colony: Colony! @belongsTo(fields: ["colonyId"])
  nativeId: Int!
  nativeFundingPotId: Int!
  nativeSkillId: Int!
  isRoot: Boolean!
  metadata: DomainMetadata @hasOne(fields: ["id"])
}

type DomainMetadata @model {
  id: ID! # This field is referenced by Domain id, so has to be in the same format: colonyAddress_nativeId
  name: String!
  description: String!
  color: DomainColor!
  changelog: [DomainMetadataChangelog!]
}

type DomainMetadataChangelog {
  transactionHash: String!
  oldName: String!
  newName: String!
  oldColor: DomainColor!
  newColor: DomainColor!
  oldDescription: String!
  newDescription: String!
}

type ColonyFundsClaim @model {
  id: ID! @index(sortKeyFields: ["createdAt"])
  token: Token! @hasOne
  createdAtBlock: Int!
  createdAt: AWSDateTime!
  amount: String!
}

# This is really not elegant, but there's no other proper solution, as you can't
# return the Token @hadOne relationship from the lambda function
# Note that we don't need token details for the values that we're fetching (since
# it's implied), but it would have been nice not to have to basically repeat the type
type ColonyChainFundsClaim {
  id: ID!
  createdAtBlock: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  amount: String!
}

# This is not a @model since it will only be returned by a lambda function
# so don't need to create tables for them
# Note that we also need input types since it treats the `balances` as available
# to "write" to at creation time, even though, even if you were to write to
# you'd never actually be able to read that data since the return is overwritten
# by the lambda function
type ColonyBalance {
  id: ID!
  balance: String!
  domain: Domain
  # Note that for the chain native token, name and symbol are empty
  token: Token!
}
type ColonyBalances {
  items: [ColonyBalance]
}
input DomainInput {
  id: ID!
}
input TokenInput {
  id: ID!
}

# This will store the relevant events we care about for a particular colony
# Altough it might also hold events emmited by other clients (eg: network or token)
# but are event pertaining to a colony
# Generally you'd want to use this from a block ingenstor, after you've processed
# data from an event, also save that even for future use
type ContractEvent @model {
  id: ID! #chainID_transactionHash_logIndex
  # i'm debating if this should be a enum or not, but this was you don't have to
  # update this schema every time you want to start tracking a new event
  name: String!
  signature: String!
  chainMetadata: ChainMetadata!
  # Note that they are not required, meaning that at any point, one or more, even
  # all of them might not be set
  colony: Colony @hasOne
  token: Token @hasOne
  domain: Domain @hasOne
  user: User @hasOne
  agent: String! # who initiated the event
  target: String! # who was on the receiving end of it
  encodedArguments: String # basically a JSON string
}

type ColonyExtension @model {
  id: ID!
  colonyId: ID!
    @index(
      name: "byColony"
      sortKeyFields: ["hash"]
      queryField: "getExtensionByColonyAndHash"
    )
  colony: Colony! @belongsTo(fields: ["colonyId"])
  hash: String!
  installedBy: String!
  installedAt: AWSTimestamp!
  isDeprecated: Boolean!
  isDeleted: Boolean!
  isInitialized: Boolean!
  version: Int!
}

type CurrentVersion @model {
  id: ID!
  key: String! @index(name: "byKey", queryField: "getCurrentVersionByKey")
  version: Int!
}

type CurrentNetworkInverseFee @model {
  id: ID!
  inverseFee: String!
}

type ColonyAction @model {
  # Required fields common for all actions
  id: ID!
  colonyId: ID!
    @index(
      name: "byColony"
      queryField: "getActionsByColony"
      sortKeyFields: ["createdAt"]
    )
  colony: Colony! @belongsTo(fields: ["colonyId"])
  type: ColonyActionType!
  blockNumber: Int!
  createdAt: AWSDateTime!
  # Action type specific fields which might be null
  initiatorAddress: ID # Amplify will automatically populate one of the following fields with related model if there is an initiator
  initiatorUser: User @hasOne(fields: ["initiatorAddress"])
  initiatorExtension: ColonyExtension @hasOne(fields: ["initiatorAddress"])
  initiatorColony: Colony @hasOne(fields: ["initiatorAddress"])
  recipientAddress: ID
  recipient: User @hasOne(fields: ["recipientAddress"])
  amount: String
  tokenAddress: ID
  token: Token @hasOne(fields: ["tokenAddress"])
  fromDomainId: ID
  fromDomain: Domain @hasOne(fields: ["fromDomainId"])
  toDomainId: ID
  toDomain: Domain @hasOne(fields: ["toDomainId"])
  fundamentalChainId: Int
  newColonyVersion: Int
}

# Roles have been set as role_<number> so we can more easily map them to their
# actual contract counterpart on the client and block ingestor side(s)

type ColonyRole @model {
  id: ID! @index # colonyAddress_domainNativeId_userAddress_roles
  domain: Domain! @hasOne

  targetAddress: ID # Amplify will automatically populate one of the following fields with related model if it finds one
  targetUser: User @hasOne(fields: ["targetAddress"])
  targetColony: Colony @hasOne(fields: ["targetAddress"])
  targetExtension: ColonyExtension @hasOne(fields: ["targetAddress"])
  targetToken: Token @hasOne(fields: ["targetAddress"])

  latestBlock: Int!
  role_0: Boolean # recovery
  role_1: Boolean # root
  role_2: Boolean # arbitration
  role_3: Boolean # architecture
  role_5: Boolean # funding
  role_6: Boolean # administration
}

# it's a model, not a type since this is designed to work outside of the main
# colony model, or colony role model, as, by design it should be only used
# in very specific cases
#
# This should take a snapshot of the user's full roles/permissions at a specific block

type ColonyHistoricRole @model {
  id: ID! # colonyAddress_domainNativeId_userAddress_blockNumber_roles

  # I HATE AMPLIFY SORTING! MAY IT DIE A THOUSAND DEATHS!
  #
  # @NOTE Always set to `type` to "SortedHistoricRole" to enable Amplify sorting, it DOES NOT WORK with `id`
  #
  # Apparently, it can only filter non-primary fields, meaning that if we sort by `blockNumber` then that
  # field is considered primary, so it won't allow us to filter by it.
  # To overcome this we've sorted by creation date, which is not really correct from a block chain
  # point of view, but due to the nature of the block ingestor, it works for our use case
  type: String!
    @index(
      name: "getColonyHistoricRoleByDate"
      queryField: "getColonyHistoricRoleByDate"
      sortKeyFields: ["createdAt"]
    )

  domain: Domain! @hasOne
  colony: Colony! @hasOne

  targetAddress: ID # Amplify will automatically populate one of the following fields with related model if it finds one
  targetUser: User @hasOne(fields: ["targetAddress"])
  targetColony: Colony @hasOne(fields: ["targetAddress"])
  targetExtension: ColonyExtension @hasOne(fields: ["targetAddress"])
  targetToken: Token @hasOne(fields: ["targetAddress"])

  blockNumber: Int!
  role_0: Boolean # recovery
  role_1: Boolean # root
  role_2: Boolean # arbitration
  role_3: Boolean # architecture
  role_5: Boolean # funding
  role_6: Boolean # administration
  createdAt: AWSDateTime!
}
