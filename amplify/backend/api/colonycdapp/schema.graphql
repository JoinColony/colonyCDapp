# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
# NOTE: This file is getting out hand in terms of size
# There is an official way of splitting the schema into multiple files
# https://docs.amplify.aws/cli-legacy/graphql-transformer/overview/#api-category-project-structure
# but I never could get it to work

input TokenFromEverywhereArguments {
  tokenAddress: String!
}

input CreateUniqueUserInput {
  id: ID!
  name: String!
  profile: ProfileInput
}

enum EmailPermissions {
  sendNotifications
  isHuman
}

input ProfileMetadataInput {
  emailPermissions: [String!]!
}

input MetadataInput {
  network: Network
  chainId: Int
  transactionHash: String
  logIndex: Int
  blockNumber: Int
}

input NativeTokenStatusInput {
  unlocked: Boolean
  mintable: Boolean
  unlockable: Boolean
}

input ColonyStatusInput {
  nativeToken: NativeTokenStatusInput
  recovery: Boolean
}

input CreateUniqueColonyInput {
  id: ID!
  name: String!
  colonyNativeTokenId: ID!
  profile: ProfileInput
  type: ColonyType
  status: ColonyStatusInput
  meta: MetadataInput
  version: Int!
}

input ProfileInput {
  id: ID # nullable since resolver will use User / Colony id by default
  avatar: String
  thumbnail: String
  displayName: String
  bio: String
  location: String
  website: AWSURL
  email: AWSEmail
  meta: ProfileMetadataInput
}

input CreateUniqueDomainInput {
  colonyAddress: ID!
  parentId: ID
  name: String
  description: String
  color: DomainColor
}

input GetUserReputationInput {
  walletAddress: String!
  colonyAddress: String!
  domainId: Int
  rootHash: String
}

input UpdateExtensionByColonyAndHashInput {
  colonyId: ID!
  hash: String!
  isDeprecated: Boolean
  isDeleted: Boolean
  isInitialized: Boolean
  version: Int
  installedBy: String
  installedAt: AWSTimestamp
}

input SetCurrentVersionInput {
  key: String!
  version: Int!
}

type TokenFromEverywhereReturn {
  items: [Token]
}

input GetReputationForTopDomainsInput {
  walletAddress: String!
  colonyAddress: String!
  rootHash: String
}

type UserDomainReputation {
  domainId: Int!
  reputationPercentage: String!
}

type GetReputationForTopDomainsReturn {
  items: [UserDomainReputation!]
}

enum TokenType {
  COLONY
  ERC20
  CHAIN_NATIVE
}

enum Network {
  GANACHE
  MAINNET
  GOERLI
  GNOSIS
  GNOSISFORK
}

enum DomainColor {
  LIGHTPINK
  PINK
  BLACK
  EMERALDGREEN
  BLUE
  YELLOW
  RED
  GREEN
  PERIWINKLE
  GOLD
  AQUA
  BLUEGREY
  PURPLE
  ORANGE
  MAGENTA
  PURPLEGREY
}

enum ColonyType {
  COLONY
  METACOLONY
}

enum ColonyActionType {
  GENERIC
  WRONG_COLONY
  PAYMENT
  RECOVERY
  MOVE_FUNDS
  UNLOCK_TOKEN
  MINT_TOKENS
  CREATE_DOMAIN
  VERSION_UPGRADE
  COLONY_EDIT
  EDIT_DOMAIN
  SET_USER_ROLES
  EMIT_DOMAIN_REPUTATION_PENALTY
  EMIT_DOMAIN_REPUTATION_REWARD
}

type Query {
  getTokenFromEverywhere(
    input: TokenFromEverywhereArguments
  ): TokenFromEverywhereReturn @function(name: "fetchTokenFromChain")
  getReputationForTopDomains(
    input: GetReputationForTopDomainsInput
  ): GetReputationForTopDomainsReturn
    @function(name: "getReputationForTopDomains")
  getUserReputation(input: GetUserReputationInput): String
    @function(name: "getUserReputation")
}

type Mutation {
  createUniqueUser(input: CreateUniqueUserInput): User
    @function(name: "createUniqueUser")
  createUniqueColony(input: CreateUniqueColonyInput): Colony
    @function(name: "createUniqueColony")
  createUniqueDomain(input: CreateUniqueDomainInput): Domain
    @function(name: "createUniqueDomain")
  setCurrentVersion(input: SetCurrentVersionInput): Boolean
    @function(name: "setCurrentVersion")
  updateExtensionByColonyAndHash(
    input: UpdateExtensionByColonyAndHashInput
  ): ColonyExtension @function(name: "updateExtensionByColonyAndHash")
}

# Applies to both Users and Colonies
# Might need to separate it into two later down the line
type Profile @model {
  id: ID!
  avatar: String
  thumbnail: String
  displayName: String
  bio: String
  location: String
  website: AWSURL
  email: AWSEmail @index(name: "byEmail", queryField: "getProfileByEmail")
  meta: ProfileMetadata
}

type NativeTokenStatus {
  unlocked: Boolean # If it's already unlocked
  mintable: Boolean # User has permissions to mint new tokens
  unlockable: Boolean # Token can be unlocked
}

type ColonyStatus {
  nativeToken: NativeTokenStatus
  recovery: Boolean # if it's in recovery mode
}

# Applies to both Colonies Tokens and Events, but not all fields are revlant to all
# It does not apply to user accounts as they can live on all networks
type Metadata {
  network: Network
  chainId: Int
  transactionHash: String
  logIndex: Int
  blockNumber: Int
}

type ProfileMetadata {
  emailPermissions: [String!]!
}

type Token @model {
  id: ID!
    @index(name: "byAddress", queryField: "getTokenByAddress")
    @index(sortKeyFields: ["createdAt"]) # contract address
  name: String!
  symbol: String!
  decimals: Int!
  type: TokenType @index(name: "byType", queryField: "getTokensByType")
  colonies: [Colony] @manyToMany(relationName: "ColonyTokens")
  users: [User] @manyToMany(relationName: "UserTokens")
  avatar: String
  thumbnail: String
  meta: Metadata
  createdAt: AWSDateTime!
}

type ColonyID {
  id: ID!
}

type Colony @model {
  id: ID! @index(name: "byAddress", queryField: "getColonyByAddress") # contract address
  name: String! @index(name: "byName", queryField: "getColonyByName")
  nativeToken: Token! @hasOne
  tokens: [Token] @manyToMany(relationName: "ColonyTokens")
  profileId: ID
  profile: Profile @hasOne(fields: ["profileId"])
  status: ColonyStatus
  domains: [Domain] @hasMany
  watchers: [User] @manyToMany(relationName: "WatchedColonies") # colony subscriptions
  # NOTE: Could not merge these two fields properly
  # Ideally we would merge data from these two into one field, but I couldn't do that
  # meaning we'll have to merge this data in-app (or not at all, works either way)
  # If you have a better idea, on how to merged them, I'll all ears...
  fundsClaims: [ColonyFundsClaim] @hasMany # All ERC20 token claims
  # Native chain token claims (eg: Token 0x0000...0000)
  # This is not an array since only a single token type can be returned
  chainFundsClaim: ColonyChainFundsClaim
    @function(name: "fetchColonyNativeFundsClaim")
  type: ColonyType @index(name: "byType", queryField: "getColonyByType")
  # Returns a list token balances for each domain and each token that the colony has
  balances: ColonyBalances @function(name: "fetchColonyBalances")
  meta: Metadata
  extensions: [ColonyExtension!] @hasMany(indexName: "byColony", fields: ["id"])
  version: Int!
  actions: [ColonyAction] @hasMany
}

type User @model {
  id: ID! @index(name: "byAddress", queryField: "getUserByAddress") # wallet address
  name: String! @index(name: "byName", queryField: "getUserByName")
  tokens: [Token] @manyToMany(relationName: "UserTokens")
  profileId: ID
  profile: Profile @hasOne(fields: ["profileId"])
  watchlist: [Colony] @manyToMany(relationName: "WatchedColonies") # colony subscriptions
}

type Domain @model {
  id: ID! @index(name: "byNativeId", sortKeyFields: ["nativeId"]) # colonyAddress_nativeId
  nativeId: Int!
  nativeFundingPotId: Int!
  nativeSkillId: Int!
  name: String
  description: String
  color: DomainColor
  parent: Domain @hasOne
}

type ColonyFundsClaim @model {
  id: ID! @index(sortKeyFields: ["createdAt"])
  token: Token! @hasOne
  createdAtBlock: Int!
  createdAt: AWSDateTime!
  amount: String!
}

# This is really not elegant, but there's no other proper solution, as you can't
# return the Token @hadOne relationship from the lambda function
# Note that we don't need token details for the values that we're fetching (since
# it's implied), but it would have been nice not to have to basically repeat the type
type ColonyChainFundsClaim {
  id: ID!
  createdAtBlock: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  amount: String!
}

# This is not a @model since it will only be returned by a lambda function
# so don't need to create tables for them
# Note that we also need input types since it treats the `balances` as available
# to "write" to at creation time, even though, even if you were to write to
# you'd never actually be able to read that data since the return is overwritten
# by the lambda function
type ColonyBalance {
  id: ID!
  balance: String!
  domain: Domain!
  # Note that for the chain native token, name and symbol are empty
  token: Token!
}
type ColonyBalances {
  items: [ColonyBalance]
}
input DomainInput {
  id: ID!
}
input TokenInput {
  id: ID!
}

# This will store the relevant events we care about for a particular colony
# Altough it might also hold events emmited by other clients (eg: network or token)
# but are event pertaining to a colony
# Generally you'd want to use this from a block ingenstor, after you've processed
# data from an event, also save that even for future use
type ContractEvent @model {
  id: ID! #chainID_transactionHash_logIndex
  # i'm debating if this should be a enum or not, but this was you don't have to
  # update this schema every time you want to start tracking a new event
  name: String!
  signature: String!
  meta: Metadata!
  # Note that they are not required, meaning that at any point, one or more, even
  # all of them might not be set
  colony: Colony @hasOne
  token: Token @hasOne
  domain: Domain @hasOne
  user: User @hasOne
  agent: String! # who initiated the event
  target: String! # who was on the receiving end of it
  encodedArguments: String # basically a JSON string
}

type ColonyExtension @model {
  id: ID!
  colonyId: ID!
    @index(
      name: "byColony"
      sortKeyFields: ["hash"]
      queryField: "getExtensionByColonyAndHash"
    )
  colony: Colony! @belongsTo(fields: ["colonyId"])
  hash: String!
  installedBy: String!
  installedAt: AWSTimestamp!
  isDeprecated: Boolean!
  isDeleted: Boolean!
  isInitialized: Boolean!
  version: Int!
}

type CurrentVersion @model {
  id: ID!
  key: String! @index(name: "byKey", queryField: "getCurrentVersionByKey")
  version: Int!
}

type ColonyAction @model {
  # Required fields common for all actions
  id: ID!
  colonyId: ID!
    @index(
      name: "byColony"
      queryField: "getActionsByColony"
      sortKeyFields: ["createdAt"]
    )
  colony: Colony! @belongsTo(fields: ["colonyId"])
  type: ColonyActionType!
  blockNumber: Int!
  createdAt: AWSDateTime!
  # Action type specific fields which might be null
  initiatorAddress: ID
  initiator: User @hasOne(fields: ["initiatorAddress"])
  recipientAddress: ID
  recipient: User @hasOne(fields: ["recipientAddress"])
  amount: String
  tokenAddress: ID
  token: Token @hasOne(fields: ["tokenAddress"])
  fromDomain: String
  toDomain: String
  fundamentalChainId: Int
}
